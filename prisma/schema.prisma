generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email         String         @unique
  name          String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt
  historyAssets AssetHistory[]
  assets        Assets[]
  categories    Categories[]
  circleUsers   CircleUsers[]
  circles       Circles[]
  records       Records[]
  UserSettings  UserSettings[]
}

model UserSettings {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  locale    String   @default("en")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  userId    String?  @db.Uuid
  user      Users?   @relation(fields: [userId], references: [id])
}

model Circles {
  id              String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @default(now()) @updatedAt
  userId          String?         @db.Uuid
  circleSettingId String?         @db.Uuid
  currency        String          @default("IDR")
  assetHistory    AssetHistory[]
  assets          Assets[]
  categories      Categories[]
  circleUsers     CircleUsers[]
  user            Users?          @relation(fields: [userId], references: [id])
  records         Records[]
  circleSettings  CircleSettings? @relation(fields: [circleSettingId], references: [id])
}

model CircleSettings {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  defaultAssetId String?   @db.Uuid
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now()) @updatedAt
  defaultAsset   Assets?   @relation(fields: [defaultAssetId], references: [id])
  Circles        Circles[]
}

model CircleUsers {
  id                     String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId                 String?   @db.Uuid
  circleId               String?   @db.Uuid
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @default(now()) @updatedAt
  latestReportReceivedAt DateTime?
  receiveReport          Boolean   @default(true)
  circle                 Circles?  @relation(fields: [circleId], references: [id])
  user                   Users?    @relation(fields: [userId], references: [id])
}

model Records {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  amount      Float
  description String
  date        DateTime
  categoryId  String        @db.Uuid
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now()) @updatedAt
  userId      String?       @db.Uuid
  circleId    String?       @db.Uuid
  currency    String        @default("IDR")
  assetId     String?       @db.Uuid
  asset       Assets?       @relation(fields: [assetId], references: [id])
  category    Categories    @relation(fields: [categoryId], references: [id])
  circle      Circles?      @relation(fields: [circleId], references: [id])
  user        Users?        @relation(fields: [userId], references: [id])
  BulkRecords BulkRecords[]
}

model Categories {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  color     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  circleId  String?   @db.Uuid
  userId    String?   @db.Uuid
  type      String?
  circle    Circles?  @relation(fields: [circleId], references: [id])
  user      Users?    @relation(fields: [userId], references: [id])
  records   Records[]
}

model Assets {
  id                    String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                  String
  amount                Float
  type                  String?
  platform              String?
  color                 String?
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @default(now()) @updatedAt
  circleId              String?          @db.Uuid
  userId                String?          @db.Uuid
  estimatedReturnAmount Int?
  estimatedReturnDate   DateTime?
  recordedAt            DateTime         @default(now())
  assetHistory          AssetHistory[]
  circle                Circles?         @relation(fields: [circleId], references: [id])
  user                  Users?           @relation(fields: [userId], references: [id])
  records               Records[]
  CircleSettings        CircleSettings[]
}

model AssetHistory {
  id                    String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                  String
  amount                Float
  type                  String?
  platform              String?
  color                 String?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @default(now()) @updatedAt
  assetId               String        @db.Uuid
  circleId              String?       @db.Uuid
  userId                String?       @db.Uuid
  estimatedReturnAmount Int?
  estimatedReturnDate   DateTime?
  actionName            String
  asset                 Assets        @relation(fields: [assetId], references: [id])
  circle                Circles?      @relation(fields: [circleId], references: [id])
  user                  Users?        @relation(fields: [userId], references: [id])
  BulkRecords           BulkRecords[]
}

model BulkRecords {
  id             String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now()) @updatedAt
  assetHistoryId String        @db.Uuid
  recordId       String        @db.Uuid
  record         Records?      @relation(fields: [recordId], references: [id])
  assetHistory   AssetHistory? @relation(fields: [assetHistoryId], references: [id])
}
