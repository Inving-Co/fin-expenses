generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email         String         @unique
  name          String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt
  categories    Categories[]
  circleUsers   CircleUsers[]
  circles       Circles[]
  transactions  Transactions[]
  assets        Assets[]
  historyAssets AssetHistory[]
}

model Circles {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now()) @updatedAt
  userId       String?        @db.Uuid
  categories   Categories[]
  circleUsers  CircleUsers[]
  user         Users?         @relation(fields: [userId], references: [id])
  transactions Transactions[]
  assets       Assets[]
  assetHistory AssetHistory[]
}

model CircleUsers {
  id                     String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId                 String?   @db.Uuid
  circleId               String?   @db.Uuid
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @default(now()) @updatedAt
  latestReportReceivedAt DateTime?
  receiveReport          Boolean   @default(true)
  circle                 Circles?  @relation(fields: [circleId], references: [id])
  user                   Users?    @relation(fields: [userId], references: [id])
}

model Transactions {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  amount      Int
  description String
  date        DateTime
  categoryId  String     @db.Uuid
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now()) @updatedAt
  userId      String?    @db.Uuid
  circleId    String?    @db.Uuid
  category    Categories @relation(fields: [categoryId], references: [id])
  circle      Circles?   @relation(fields: [circleId], references: [id])
  user        Users?     @relation(fields: [userId], references: [id])
}

model Categories {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String
  color        String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now()) @updatedAt
  circleId     String?        @db.Uuid
  userId       String?        @db.Uuid
  type         String?
  circle       Circles?       @relation(fields: [circleId], references: [id])
  user         Users?         @relation(fields: [userId], references: [id])
  transactions Transactions[]
}

model Assets {
  id                    String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                  String
  amount                Int
  estimatedReturnAmount Int?
  estimatedReturnDate   DateTime?
  type                  String?
  platform              String?
  color                 String?
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @default(now()) @updatedAt
  circleId              String?        @db.Uuid
  userId                String?        @db.Uuid
  circle                Circles?       @relation(fields: [circleId], references: [id])
  user                  Users?         @relation(fields: [userId], references: [id])
  assetHistory          AssetHistory[]
}

model AssetHistory {
  id                    String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                  String
  amount                Int
  estimatedReturnAmount Int?
  estimatedReturnDate   DateTime?
  type                  String?
  platform              String?
  color                 String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @default(now()) @updatedAt
  assetId               String    @db.Uuid
  circleId              String?   @db.Uuid
  userId                String?   @db.Uuid
  asset                 Assets    @relation(fields: [assetId], references: [id])
  circle                Circles?  @relation(fields: [circleId], references: [id])
  user                  Users?    @relation(fields: [userId], references: [id])
}
